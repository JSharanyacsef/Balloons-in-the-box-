import numpy as np
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from matplotlib.animation import FuncAnimation
from mpl_toolkits.mplot3d import Axes3D
from tkinter import *
from tkinter import messagebox
import random
import math
import platform
import os

# Optional burst sound (Windows only)
if platform.system() == 'Windows':
    import winsound
    def play_burst_sound():
        if os.path.exists("burst.wav"):
            try:
                winsound.PlaySound("burst.wav", winsound.SND_FILENAME | winsound.SND_ASYNC)
            except:
                print("Error: 'burst.wav' could not be played.")
        else:
            print("Warning: 'burst.wav' not found.")
else:
    def play_burst_sound():
        print("Burst sound not supported on this OS.")

# Balloon class
class Balloon:
    def _init_(self, balloon_id, x, y, z, on_burst_callback, radius=1.0):
        self.id = balloon_id
        self.center = [x, y, z]
        self.radius = radius
        self.color = [random.random() for _ in range(3)]
        self.alive = True
        self.on_burst_callback = on_burst_callback

    def grow(self):
        if self.radius < 5:
            self.radius += 0.2
        else:
            if self.alive:
                self.alive = False
                play_burst_sound()
                self.on_burst_callback(self.id)  # Trigger the popup

# Main simulation class
class BalloonSimulation:
    def _init_(self, root):
        self.root = root
        self.root.title("ðŸŽˆ Balloon Simulation")
        self.balloons = []

        # Create 3D plot area
        self.fig = plt.figure(figsize=(6, 6))
        self.ax = self.fig.add_subplot(111, projection='3d')
        self.canvas = FigureCanvasTkAgg(self.fig, master=root)
        self.canvas.get_tk_widget().grid(row=0, column=0, sticky="nsew", columnspan=3)

        # Top-right control panel
        right_top_frame = Frame(root)
        right_top_frame.grid(row=0, column=2, sticky="ne", padx=10, pady=10)

        Button(right_top_frame, text="Add Balloon", command=self.add_balloon).grid(row=0, column=0, padx=5)
        Button(right_top_frame, text="Remaining Volume", command=self.show_remaining_volume).grid(row=1, column=0, pady=5)

        # Bottom control panel
        control_frame = Frame(root)
        control_frame.grid(row=1, column=0, padx=10, columnspan=3, pady=10)

        Label(control_frame, text="Balloon ID:").grid(row=0, column=0, padx=5)
        self.id_entry = Entry(control_frame, width=5)
        self.id_entry.grid(row=0, column=1, padx=5)

        Button(control_frame, text="Grow Balloon", command=self.grow_balloon).grid(row=0, column=2, padx=5)
        Button(control_frame, text="Remove Balloon", command=self.remove_balloon).grid(row=0, column=3, padx=5)

        self.ani = FuncAnimation(self.fig, self.update_plot, interval=500)

    def get_selected_id(self):
        try:
            return int(self.id_entry.get())
        except ValueError:
            return None

    def is_far_enough(self, x, y, z, min_dist=4.0):
        for b in self.balloons:
            if not b.alive:
                continue
            dist = math.dist([x, y, z], b.center)
            if dist < min_dist:
                return False
        return True

    def get_next_id(self):
        used_ids = {b.id for b in self.balloons if b.alive}
        for i in range(1, 11):
            if i not in used_ids:
                return i
        return None

    def on_balloon_burst(self, balloon_id):
        messagebox.showinfo("Balloon Burst", f"Balloon B{balloon_id} popped!")

    def add_balloon(self):
        if sum(b.alive for b in self.balloons) >= 10:
            messagebox.showwarning("Limit Reached", "THE LIMIT IS 10")
            return

        next_id = self.get_next_id()
        if next_id is None:
            messagebox.showwarning("Limit Reached", "THE LIMIT IS 10")
            return

        for _ in range(100):
            x, y, z = [random.uniform(-8, 8) for _ in range(3)]
            if self.is_far_enough(x, y, z):
                self.balloons.append(Balloon(next_id, x, y, z, self.on_balloon_burst))
                return

        messagebox.showwarning("Placement Failed", "Couldn't find space for a new balloon.")

    def grow_balloon(self):
        balloon_id = self.get_selected_id()
        for b in self.balloons:
            if b.id == balloon_id and b.alive:
                b.grow()

    def remove_balloon(self):
        balloon_id = self.get_selected_id()
        self.balloons = [b for b in self.balloons if b.id != balloon_id]

    def show_remaining_volume(self):
        box_vol = 20**3
        used_vol = sum((4/3) * math.pi * (b.radius**3) for b in self.balloons if b.alive)
        remaining = box_vol - used_vol
        messagebox.showinfo("Remaining Volume",
                            f"Used Volume: {used_vol:.2f} unitsÂ³\n"
                            f"Remaining Volume: {remaining:.2f} unitsÂ³")

    def update_plot(self, frame):
        self.ax.clear()
        self.ax.set_xlim(-10, 10)
        self.ax.set_ylim(-10, 10)
        self.ax.set_zlim(-10, 10)
        self.ax.set_title("ðŸŽˆ Balloon Simulation")

        for b in self.balloons:
            if b.alive:
                u, v = np.mgrid[0:2*np.pi:20j, 0:np.pi:10j]
                x = b.radius * np.cos(u) * np.sin(v) + b.center[0]
                y = b.radius * np.sin(u) * np.sin(v) + b.center[1]
                z = b.radius * np.cos(v) + b.center[2]
                self.ax.plot_surface(x, y, z, color=b.color, alpha=0.6, shade=True)
                lx, ly, lz = b.center[0], b.center[1], b.center[2] + b.radius + 0.5
                self.ax.text(lx, ly, lz, f"B{b.id}", color='white', fontsize=12,
                             fontweight='bold', bbox=dict(facecolor='black', edgecolor='white', pad=2))

# === Start screen ===
def launch_simulation():
    start_window.destroy()
    main_root = Tk()
    app = BalloonSimulation(main_root)
    main_root.mainloop()

start_window = Tk()
start_window.title("Start Menu")
start_window.geometry("600x600")
Label(start_window, text="Welcome to Balloon Simulation!", font=("Arial", 30)).pack(pady=100)
Button(start_window, text="START", font=("Arial", 12), command=launch_simulation).pack(pady=10)
start_window.mainloop()
