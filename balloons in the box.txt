import numpy as np
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
from mpl_toolkits.mplot3d import Axes3D
import random
import threading
import winsound

# Box boundaries
box_min, box_max = -10, 10

# Lock for safe multi-thread access
balloon_lock = threading.Lock()

# Sound effect function
def play_explosion_sound():
    winsound.PlaySound("blast.wav", winsound.SND_FILENAME | winsound.SND_ASYNC)

# Balloon class
class Balloon:
    id_counter = 1

    def __init__(self):
        self.id = Balloon.id_counter
        Balloon.id_counter += 1
        self.center = np.array([
            random.uniform(box_min + 2, box_max - 2),
            random.uniform(box_min + 2, box_max - 2),
            random.uniform(box_min + 2, box_max - 2)
        ])
        self.radius = 0.5
        self.color = np.random.rand(3,)
        self.selected = False
        self.rotation_angle = 0
        self.rotation_axis = np.random.rand(3,) - 0.5
        self.rotation_axis /= np.linalg.norm(self.rotation_axis)

    def grow(self, rate=0.05):
        self.radius += rate

    def rotate(self):
        self.rotation_angle += 0.1
        # Simulate orbit-like rotation for visualization
        theta = self.rotation_angle
        rot_vec = np.cross(self.rotation_axis, self.center)
        if np.linalg.norm(rot_vec) > 0:
            rot_vec = rot_vec / np.linalg.norm(rot_vec)
        displacement = 0.05 * np.array([
            np.cos(theta) * rot_vec[0],
            np.sin(theta) * rot_vec[1],
            np.sin(theta) * rot_vec[2]
        ])
        self.center += displacement

    def is_inside_box(self):
        return all(abs(self.center[i]) + self.radius <= box_max for i in range(3))

# User chooses number of balloons
try:
    num_balloons = int(input("Enter number of initial balloons: "))
    if num_balloons <= 0:
        raise ValueError
except ValueError:
    print("Please enter a positive integer.")
    exit()

balloons = [Balloon() for _ in range(num_balloons)]

# Plot setup
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.set_xlim(box_min, box_max)
ax.set_ylim(box_min, box_max)
ax.set_zlim(box_min, box_max)
ax.set_title("üéà Balloon Simulation (Selective Growth + Random Rotation)")

# Draw a balloon
def create_sphere(center, radius, color):
    u, v = np.mgrid[0:2*np.pi:16j, 0:np.pi:8j]
    x = center[0] + radius * np.cos(u) * np.sin(v)
    y = center[1] + radius * np.sin(u) * np.sin(v)
    z = center[2] + radius * np.cos(v)
    return ax.plot_surface(x, y, z, color=color, alpha=0.6, edgecolor='k')

# Animation frame update
def update(frame):
    global balloons
    ax.cla()
    ax.set_xlim(box_min, box_max)
    ax.set_ylim(box_min, box_max)
    ax.set_zlim(box_min, box_max)
    ax.set_title("üéà Balloon Simulation (Selective Growth + Random Rotation)")

    alive_balloons = []

    with balloon_lock:
        for balloon in balloons:
            if balloon.selected:
                balloon.grow()
            balloon.rotate()
            if balloon.is_inside_box():
                create_sphere(balloon.center, balloon.radius, balloon.color)
                alive_balloons.append(balloon)
            else:
                print(f"üí• Balloon {balloon.id} exploded at {np.round(balloon.center, 2)}")
                threading.Thread(target=play_explosion_sound, daemon=True).start()

        balloons[:] = alive_balloons

    if not balloons:
        ani.event_source.stop()
        print("All balloons have exploded!")

# User control thread
def user_control_thread():
    print("\nüéÆ Balloon Control Panel üéÆ")
    print("Type a balloon ID to grow it. Type 'stop <ID>' to stop growth.")
    print("Type 'list' to see balloon IDs. Type 'add' to create a new balloon.")
    print("Type 'exit' to quit control panel.\n")
    while True:
        user_input = input("Command: ").strip().lower()
        if user_input == "exit":
            print("‚ùå Exiting control panel.")
            break
        elif user_input == "list":
            with balloon_lock:
                for b in balloons:
                    status = "GROWING" if b.selected else "idle"
                    print(f"Balloon {b.id} | Radius: {b.radius:.2f} | {status}")
        elif user_input.startswith("stop "):
            try:
                stop_id = int(user_input.split()[1])
                with balloon_lock:
                    for b in balloons:
                        if b.id == stop_id:
                            b.selected = False
                            print(f"üõë Balloon {stop_id} growth stopped.")
            except:
                print("Invalid format. Use: stop <ID>")
        elif user_input == "add":
            new_balloon = Balloon()
            with balloon_lock:
                balloons.append(new_balloon)
            print(f"üéà New balloon added with ID {new_balloon.id}")
        else:
            try:
                balloon_id = int(user_input)
                with balloon_lock:
                    found = False
                    for b in balloons:
                        if b.id == balloon_id:
                            b.selected = True
                            print(f"‚úÖ Balloon {balloon_id} set to grow.")
                            found = True
                            break
                    if not found:
                        print("‚ùå Balloon ID not found.")
            except ValueError:
                print("‚ö†Ô∏è Invalid command.")

# Start control thread
threading.Thread(target=user_control_thread, daemon=True).start()

# Start animation
ani = FuncAnimation(fig, update, frames=200, interval=100)
plt.show()
